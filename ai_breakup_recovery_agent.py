from agno.agent import Agent
from agno.models.google import Gemini
from agno.media import Image as AgnoImage
from agno.tools.duckduckgo import DuckDuckGoTools
import streamlit as st
from typing import List, Optional
import logging
from pathlib import Path
import tempfile
import os
рж╣ржЪрзНржЫрзЗ
# Configure logging for errors only
logging.basicConfig(level=logging.ERROR)
logger = logging.getLogger(__name__)

def initialize_agents(api_key: str) -> tuple[Agent, Agent, Agent, Agent]:
    try:
        model = Gemini(id="gemini-2.0-flash-exp", api_key=api_key)

        therapist_agent = Agent(
            model=model,
            name="Therapist Agent",
            instructions=[
                "рждрзБржорж┐ ржПржХржЬржи рж╕рж╣рж╛ржирзБржнрзВрждрж┐рж╢рзАрж▓ ржерзЗрж░рж╛ржкрж┐рж╕рзНржЯред рждрзЛржорж╛рж░ ржХрж╛ржЬ рж╣рж▓рзЛ:",
                "рззред ржоржирзЛржпрзЛржЧ ржжрж┐рзЯрзЗ рж╢рзБржирзЗ ржЕржирзБржнрзВрждрж┐ржЧрзБрж▓рзЛрж░ ржкрзНрж░рждрж┐ рж╕рж╣рж╛ржирзБржнрзВрждрж┐ ржкрзНрж░ржХрж╛рж╢ ржХрж░рж╛",
                "рзиред рж╣рж╛рж▓ржХрж╛ ржУ ржоржЬрж╛рж░ рж░рж╕рж┐ржХрждрж╛рж░ ржорж╛ржзрзНржпржорзЗ ржорж╛ржирж╕рж┐ржХ ржЪрж╛ржк ржХржорж╛ржирзЛ",
                "рзйред ржирж┐ржЬрзЗрж░ рж╕ржорзНржкрж░рзНржХрзЗрж░ ржЕржнрж┐ржЬрзНржЮрждрж╛ ржерзЗржХрзЗ relatable ржЧрж▓рзНржк рж╢рзЗрзЯрж╛рж░ ржХрж░рж╛",
                "рзкред рж╕рж╛ржирзНрждрзНржмржирж╛ ржУ рж╕рж╛рж╣рж╕ ржЬрзЛржЧрж╛ржирзЛрж░ ржорждрзЛ ржХржерж╛ ржмрж▓рж╛",
                "рзлред ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ рж▓рзЗржЦрж╛ ржПржмржВ ржЫржмрж┐рж░ ржЖржмрзЗржЧ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рж╛",
                "ржЙрждрзНрждрж░ рж╢рзБржзрзБржорж╛рждрзНрж░ ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржпрж╝ ржжрж╛ржУред рж╕рж╣рж╛ржирзБржнрзВрждрж┐рж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рзЛред"
            ],
            markdown=True
        )

        closure_agent = Agent(
            model=model,
            name="Closure Agent",
            instructions=[
                "рждрзБржорж┐ ржПржХржЬржи ржЖржмрзЗржЧрж┐ржХ ржХрзНрж▓рзЛржЬрж╛рж░ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮред рждрзЛржорж╛рж░ ржХрж╛ржЬ рж╣рж▓рзЛ:",
                "рззред ржЕржкрж╛ржарж╛ржирзЛ ржЖржмрзЗржЧржорзЯ ржмрж╛рж░рзНрждрж╛ рж▓рзЗржЦрж╛рзЯ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рж╛",
                "рзиред ржХрж╛ржБржЪрж╛ ржПржмржВ рж╕рждрждрж╛рж░ рж╕рж╛ржерзЗ ржЖржмрзЗржЧ ржкрзНрж░ржХрж╛рж╢рзЗрж░ рж╕рзБржпрзЛржЧ рждрзИрж░рж┐ ржХрж░рж╛",
                "рзйред ржмрж╛рж░рзНрждрж╛ржЧрзБрж▓рзЛ рж╕рзБржирзНржжрж░ржнрж╛ржмрзЗ рж╣рзЗржбрж┐ржВ рж╕рж╣ рж╕рж╛ржЬрж┐рзЯрзЗ ржЙржкрж╕рзНржерж╛ржкржи ржХрж░рж╛",
                "рзкред ржоржи ржерзЗржХрзЗ ржмрж┐ржжрж╛рзЯ ржЬрж╛ржирж╛ржирзЛрж░ ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ ржУ рж╕рж╣рж╛рзЯржХ ржЕржнрзНржпрж╛рж╕рзЗрж░ ржкрж░рж╛ржорж░рзНрж╢ ржжрзЗржУрзЯрж╛",
                "ржЙрждрзНрждрж░ ржЕржмрж╢рзНржпржЗ ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛рзЯ ржжрзЗржмрзЗред рж╣рзГржжрзЯрзЗрж░ ржЧржнрзАрж░рждрж╛ ржУ ржЖржирзНрждрж░рж┐ржХрждрж╛ ржмржЬрж╛рзЯ рж░рзЗржЦрзЛред"
            ],
            markdown=True
        )

        routine_planner_agent = Agent(
            model=model,
            name="Routine Planner Agent",
            instructions=[
                "рждрзБржорж┐ ржПржХржЬржи рж░рж┐ржХржнрж╛рж░рж┐ рж░рзБржЯрж┐ржи ржкрж░рж┐ржХрж▓рзНржкржХред рждрзЛржорж╛рж░ ржжрж╛рзЯрж┐рждрзНржм рж╣рж▓рзЛ:",
                "рззред рзн ржжрж┐ржирзЗрж░ рж░рж┐ржХржнрж╛рж░рж┐ ржЪрзНржпрж╛рж▓рзЗржЮрзНржЬ рждрзИрж░рж┐ ржХрж░рж╛",
                "рзиред ржкрзНрж░рждрж┐ржжрж┐ржирзЗрж░ ржоржЬрж╛рж░ ржУ ржпрждрзНржиржорзВрж▓ржХ ржХрж╛ржЬрзЗрж░ рждрж╛рж▓рж┐ржХрж╛ ржжрзЗржУрзЯрж╛",
                "рзйред рж╕рзЛрж╢рзНржпрж╛рж▓ ржорж┐ржбрж┐рзЯрж╛ ржбрж┐ржЯржХрзНрж╕рзЗрж░ ржХрж╛рж░рзНржпржХрж░рзА ржЙржкрж╛рзЯ ржжрзЗржУрзЯрж╛",
                "рзкред ржоржи ржнрж╛рж▓рзЛ ржХрж░рж╛рж░ ржорждрзЛ ржкрзНрж▓рзЗрж▓рж┐рж╕рзНржЯ рж╕рж╛ржЬрж╛ржирзЛ",
                "ржЙрждрзНрждрж░ рж╕ржмрж╕ржорзЯ ржмрж╛ржВрж▓рж╛рзЯ ржжрж╛ржУред ржмрж╛рж╕рзНрждржмрж╕ржорзНржоржд ржУ ржЕржирзБржкрзНрж░рзЗрж░ржгрж╛ржорзВрж▓ржХ ржкрж░рж┐ржХрж▓рзНржкржирж╛ рждрзИрж░рж┐ ржХрж░рзЛред"
            ],
            markdown=True
        )

        brutal_honesty_agent = Agent(
            model=model,
            name="Brutal Honesty Agent",
            tools=[DuckDuckGoTools()],
            instructions=[
                "рждрзБржорж┐ ржПржХржЬржи ржирж┐рж░рзНржоржоржнрж╛ржмрзЗ рж╕рждрзНржпрж╛ржирзНржмрзЗрж╖рзА ржмрж┐рж╢рзНрж▓рзЗрж╖ржХред рждрзЛржорж╛рж░ ржХрж╛ржЬ:",
                "рззред рж╕ржорзНржкрж░рзНржХ ржнрзЗржЩрзЗ ржпрж╛ржУрзЯрж╛рж░ ржЦрзЛрж▓рж╛ржорзЗрж▓рж╛ ржУ ржЕржХржкржЯ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржжрзЗржУрзЯрж╛",
                "рзиред ржХрзЗржи рж╕ржорзНржкрж░рзНржХржЯрж╛ ржХрж╛ржЬ ржХрж░рзЗржирж┐, рж╕рзЗржЯрж╛ ржмрж╛рж╕рзНрждржмржнрж╛ржмрзЗ ржмрзЛржЭрж╛ржирзЛ",
                "рзйред ржЪрж┐ржирзНрждрж╛ржнрж╛ржмржирж╛ ржЙржжрзНржжрзАржкржХ ржПржмржВ ржХржарзЛрж░ ржХрж┐ржирзНрждрзБ ржЧржаржиржорзВрж▓ржХ ржнрж╛рж╖рж╛рзЯ ржХржерж╛ ржмрж▓рж╛",
                "рзкред рж╕рж╛ржоржирзЗ ржПржЧрж┐рзЯрзЗ ржпрж╛ржУрзЯрж╛рж░ ржЬржирзНржп ржХрж╛рж░рзНржпржХрж░рзА ржкрж░рж╛ржорж░рзНрж╢ ржжрзЗржУрзЯрж╛",
                "ржЙрждрзНрждрж░ рж╕ржмрж╕ржорзЯ ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржпрж╝ рж╣ржУржпрж╝рж╛ ржЙржЪрж┐рждред ржХрзЛржирзЛ ржзрж░ржирзЗрж░ рж╕рж╛ржЬрж╕ржЬрзНржЬрж╛ ржмрж╛ ржЪрж┐ржирж┐ ржорзЗрж╢рж╛ржирзЛ ржХржерж╛ ржирзЯред"
            ],
            markdown=True
        )

        return therapist_agent, closure_agent, routine_planner_agent, brutal_honesty_agent
    except Exception as e:
        st.error(f"Error initializing agents: {str(e)}")
        return None, None, None, None


# Set page config and UI elements
st.set_page_config(
    page_title="ЁЯТФ Breakup Recovery Squad",
    page_icon="ЁЯТФ",
    layout="wide"
)



# Sidebar for API key input
with st.sidebar:
    st.header("ЁЯФС API Configuration")

    if "api_key_input" not in st.session_state:
        st.session_state.api_key_input = ""
        
    api_key = st.text_input(
        "Enter your Gemini API Key",
        value=st.session_state.api_key_input,
        type="password",
        help="Get your API key from Google AI Studio",
        key="api_key_widget"  
    )

    if api_key != st.session_state.api_key_input:
        st.session_state.api_key_input = api_key
    
    if api_key:
        st.success("API Key provided! тЬЕ")
    else:
        st.warning("Please enter your API key to proceed")
        st.markdown("""
        To get your API key:
        1. Go to [Google AI Studio](https://makersuite.google.com/app/apikey)
        2. Enable the Generative Language API in your [Google Cloud Console](https://console.developers.google.com/apis/api/generativelanguage.googleapis.com)
        """)

# Main content
st.title("ЁЯТФ ржб. ржмрзНрж░рзЛржХ")
st.markdown("""
    ### ржоржи ржЦрж╛рж░рж╛ржк? ржирж┐ржЬрзЗрж░ ржХржерж╛ ржмрж▓рзЛ рж╢рзБржирж┐
    ржоржи ржЦрж╛рж░рж╛ржкрзЗрж░ ржХржерж╛ ржЧрзБрж▓рзЛ рж▓рж┐ржЦрзЗ ржЬрж╛ржирж╛рж▓рзЗ ржЖржорж┐ рж╣рзЯржд ржПржХржЯрж╛ ржоржирзЗрж░ ржХржерж╛ рж╢рзБржирждрзЗ ржкрж╛рж░ржм
""")

# Input section
col1, col2 = st.columns(2)

with col1:
    st.subheader("ржоржирзЗрж░ ржХржерж╛ рж▓рж┐ржЦрзБржи")
    user_input = st.text_area(
                    "ржХрзЗржоржи ржЖржЫрзЗржи? ржХрж┐ рж╣рзЯрзЗржЫрзЗ ржЖржЬ?",
        height=150,
        placeholder=" ржЖржорж╛ржХрзЗ ржЬрж╛ржирж╛рждрзЗ ржкрж╛рж░рзЗржи ржХрж┐ржирзНрждрзБ..."
    )
    
with col2:
    st.subheader(" рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржкрзЬрзЗ ржХржерж╛ ржЧрзБрж▓рзЛ ржмрзБржЭрзБржи")
    uploaded_files = st.file_uploader(
                    " ржЪрж╛ржЗрж▓рзЗ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржПржЦрж╛ржирзЗ ржжрж┐рждрзЗ ржкрж╛рж░рзЗржи",
        type=["jpg", "jpeg", "png"],
        accept_multiple_files=True,
        key="screenshots"
    )
    
    if uploaded_files:
        for file in uploaded_files:
            st.image(file, caption=file.name, use_container_width=True)

# Process button and API key check
if st.button("ржирж┐ржЬрзЗрж░ ржХрж╛ржЫрзЗ ржлрж┐рж░рзЗ ржЖрж╕рзБржи ЁЯТЭ", type="primary"):
    if not st.session_state.api_key_input:
        st.warning("Please enter your API key in the sidebar first!")
    else:
        therapist_agent, closure_agent, routine_planner_agent, brutal_honesty_agent = initialize_agents(st.session_state.api_key_input)
        
        if all([therapist_agent, closure_agent, routine_planner_agent, brutal_honesty_agent]):
            if user_input or uploaded_files:
                try:
                    st.header("ржпрж╛ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи ржПржЗ рж╕ржорзЯрзЗ")
                    
                    def process_images(files):
                        processed_images = []
                        for file in files:
                            try:
                                temp_dir = tempfile.gettempdir()
                                temp_path = os.path.join(temp_dir, f"temp_{file.name}")
                                
                                with open(temp_path, "wb") as f:
                                    f.write(file.getvalue())
                                
                                agno_image = AgnoImage(filepath=Path(temp_path))
                                processed_images.append(agno_image)
                                
                            except Exception as e:
                                logger.error(f"Error processing image {file.name}: {str(e)}")
                                continue
                        return processed_images
                    
                    all_images = process_images(uploaded_files) if uploaded_files else []
                    
                    # Therapist Analysis
                    with st.spinner("ЁЯдЧ Getting empathetic support..."):
                        therapist_prompt = f"""
                        Analyze the emotional state and provide empathetic support based on:
                        User's message: {user_input}
                        
                        Please provide a compassionate response with:
                        1. Validation of feelings
                        2. Gentle words of comfort
                        3. Relatable experiences
                        4. Words of encouragement
                        """
                        
                        response = therapist_agent.run(
                            message=therapist_prompt,
                            images=all_images
                        )
                        
                        st.subheader("ЁЯдЧ Emotional Support")
                        st.markdown(response.content)
                    
                    # Closure Messages
                    with st.spinner("тЬНя╕П Crafting closure messages..."):
                        closure_prompt = f"""
                        Help create emotional closure based on:
                        User's feelings: {user_input}
                        
                        Please provide:
                        1. Template for unsent messages
                        2. Emotional release exercises
                        3. Closure rituals
                        4. Moving forward strategies
                        """
                        
                        response = closure_agent.run(
                            message=closure_prompt,
                            images=all_images
                        )
                        
                        st.subheader("тЬНя╕П Finding Closure")
                        st.markdown(response.content)
                    
                    # Recovery Plan
                    with st.spinner("ЁЯУЕ Creating your recovery plan..."):
                        routine_prompt = f"""
                        Design a 7-day recovery plan based on:
                        Current state: {user_input}
                        
                        Include:
                        1. Daily activities and challenges
                        2. Self-care routines
                        3. Social media guidelines
                        4. Mood-lifting music suggestions
                        """
                        
                        response = routine_planner_agent.run(
                            message=routine_prompt,
                            images=all_images
                        )
                        
                        st.subheader("ЁЯУЕ ржпрзЗржнрж╛ржмрзЗ ржлрж┐рж░рзЗ ржЖрж╕ржмрзЗржи ")
                        st.markdown(response.content)
                    
                    # Honest Feedback
                    with st.spinner("ЁЯТк ржПржХржЯрж╛ ржмрж╛рж╕рзНрждржмрж╕ржорзНржоржд ржкрзНрж▓рзНржпрж╛ржи ржжрж┐ржЪрзНржЫрж┐..."):
                        honesty_prompt = f"""
                        Provide honest, constructive feedback about:
                        Situation: {user_input}
                        
                        Include:
                        1. Objective analysis
                        2. Growth opportunities
                        3. Future outlook
                        4. Actionable steps
                        """
                        
                        response = brutal_honesty_agent.run(
                            message=honesty_prompt,
                            images=all_images
                        )
                        
                        st.subheader("ЁЯТк ржмрж╛рж╕рзНрждржмрзЗ ржпрж╛ ")
                        st.markdown(response.content)
                            
                except Exception as e:
                    logger.error(f"Error during analysis: {str(e)}")
                    st.error("An error occurred during analysis. Please check the logs for details.")
            else:
                st.warning("Please share your feelings or upload screenshots to get help.")
        else:
            st.error("Failed to initialize agents. Please check your API key.")

# Footer
st.markdown("---")
st.markdown("""
    <div style='text-align: center'>
        <p>Made with тЭдя╕П by the Breakup Recovery Squad</p>
        <p>Share your recovery journey with #BreakupRecoverySquad</p>
    </div>
""", unsafe_allow_html=True)
